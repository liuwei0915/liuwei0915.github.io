<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wei Liu&#39;s Blog</title>
    <link>https://liuwei0915.github.io/posts/</link>
    <description>Recent content in Posts on Wei Liu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Nov 2021 00:01:54 -0800</lastBuildDate><atom:link href="https://liuwei0915.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blog12 - AWS</title>
      <link>https://liuwei0915.github.io/posts/blog12/</link>
      <pubDate>Mon, 15 Nov 2021 00:01:54 -0800</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog12/</guid>
      <description>what is cloud computing cloud computing is the deliverey of different service throught the internet, including data storage, servers, databases, networking, etc instead of your computer hard drive.
Clouding computing model  infrastructure as software  are flexible can change more quickly, easily, and cost-effectively than hardware solutions. eliminate the undifferentiated heavy-lifting tasks.   similarities between AWS and traditional IT   </description>
    </item>
    
    <item>
      <title>Blog11 - Javascript Note - Object</title>
      <link>https://liuwei0915.github.io/posts/blog11/</link>
      <pubDate>Sat, 13 Nov 2021 14:11:15 -0800</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog11/</guid>
      <description>What is Object? There are only seven fundamental data types in JavaScript, and six of those are the primitive data types: string, number, boolean, null, undefined, and symbol. With the seventh type, objects, we open our code to more complex possibilities. We can use JavaScript objects to model real-world things, like a basketball, or we can use objects to build the data structures that make the web possible. JavaScript objects are containers storing related data and functionality, but that deceptively simple task is extremely powerful in practice.</description>
    </item>
    
    <item>
      <title>Blog10 - Javascript Note Extention - Loops and Iterators</title>
      <link>https://liuwei0915.github.io/posts/blog10/</link>
      <pubDate>Sat, 13 Nov 2021 12:56:53 -0800</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog10/</guid>
      <description>Loops  Looping through Arrays  const animals = [&#39;Grizzly Bear&#39;, &#39;Sloth&#39;, &#39;Sea Lion&#39;]; for (let i = 0; i &amp;lt; animals.length; i++){ console.log(animals[i]); }  Nested Loops  const myArray = [6, 19, 20]; const yourArray = [19, 81, 2]; for (let i = 0; i &amp;lt; myArray.length; i++) { for (let j = 0; j &amp;lt; yourArray.length; j++) { if (myArray[i] === yourArray[j]) { console.log(&#39;Both loops have the number: &#39; + yourArray[j]) } } };  The While Loop  const cards = [&#39;diamond&#39;, &#39;spade&#39;, &#39;heart&#39;, &#39;club&#39;]; let currentCard = [] while (currentCard !</description>
    </item>
    
    <item>
      <title>Blog9 - Javascript Note extention - Function and Array</title>
      <link>https://liuwei0915.github.io/posts/blog9/</link>
      <pubDate>Sat, 06 Nov 2021 16:21:55 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog9/</guid>
      <description>Function The website is : https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/function-declaration
function sayThanks() { console.log(&#39;Thank you for your purchase! We appreciate your business.&#39;) } sayThanks();  setup default parameter in function  function greeting (name = &#39;stranger&#39;) { console.log(`Hello, ${name}!`) }  declare Functions using function expression:  const calculation = function (width, height) { const area = width * htight; return area; } Using arrow function notation:
const rectangleArea = (width, height) =&amp;gt; { let area = width * height; return area; };  Concise Body Arrow Functions  const squareNum = (num) =&amp;gt; { return num * num; }; We can refactor the function to:</description>
    </item>
    
    <item>
      <title>Blog8 Javascript Notes - Variable and Condition</title>
      <link>https://liuwei0915.github.io/posts/blog8/</link>
      <pubDate>Fri, 05 Nov 2021 12:30:13 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog8/</guid>
      <description>Javascript Introduction here is the website that i used for learning Javascript: https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/function-declaration
 Methods Methods return information about an object, and are called by appending an instance with a period ., the method name, and parentheses. Libraries Libraries contain methods that can be called by appending the library name with a period ., the method name, and a set of parentheses. for example:  Math.random(); //Math is library random is method name; it will return a random number between 0-1.</description>
    </item>
    
    <item>
      <title>Blog7 - Javascript</title>
      <link>https://liuwei0915.github.io/posts/blog7/</link>
      <pubDate>Mon, 01 Nov 2021 15:22:20 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog7/</guid>
      <description>what is javascript? JavaScript is a scripting or programming language that allows you to implement complex features on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies, two of which (HTML and CSS) we have covered in much more detail in other parts of the Learning Area.</description>
    </item>
    
    <item>
      <title>Blog6 - Docker Compose with LAMP on Windows or Mac</title>
      <link>https://liuwei0915.github.io/posts/blog6/</link>
      <pubDate>Tue, 26 Oct 2021 13:59:34 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog6/</guid>
      <description>What is Docker compose? Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration.
Steps that compsoe works Using Compose is basically a three-step process:
 Define your app’s environment with a Dockerfile so it can be reproduced anywhere. Define the services that make up your app in docker-compose.</description>
    </item>
    
    <item>
      <title>Blog5 - LAMP Stacks on Ubuntu</title>
      <link>https://liuwei0915.github.io/posts/blog5/</link>
      <pubDate>Sun, 17 Oct 2021 13:43:42 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog5/</guid>
      <description>What is LAMP? LAMP (Linux, Apache, MySQL, PHP/Perl/Python) is an acronym denoting one of the most common solution stacks for many of the web&amp;rsquo;s most popular applications. However, LAMP now refers to a generic software stack model and its components are largely interchangeable Linux for operating system, Apache HTTP server, MySQL for the relational database management system and PHP/Perl/Python programming language. Install LAMP Stacks on Ubuntu  Update package for Ubuntu system Make sure to update the package repository cache to ensure it installs the latest versions of the software.</description>
    </item>
    
    <item>
      <title>Blog4 - Applcation deployment --ansible and dockerfile</title>
      <link>https://liuwei0915.github.io/posts/blog4/</link>
      <pubDate>Mon, 11 Oct 2021 18:20:21 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog4/</guid>
      <description>Two ways to deploy applications to client side for supporting users Ansible   Ansible is Simpel IT Automation Ansible is an open source IT automation engine that automates provisioning, configuration management, application deployment, orchestration, and many other IT processes.
Playbook is the main thing of ansible. An Ansible playbook is an organized unit of scripts that defines work for a server configuration managed by the automation tool Ansible. Ansible plays are written in YAML.</description>
    </item>
    
    <item>
      <title>Blog3 - Docker intereview extension</title>
      <link>https://liuwei0915.github.io/posts/blog3/</link>
      <pubDate>Mon, 04 Oct 2021 15:22:47 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog3/</guid>
      <description>Docker related interview questions:  Explain what happends when an SRE executes the following command:  docker run --name inclass hello-world  docker run = run the command in a new container and build all intermediate image as needed. &amp;ndash;name = Assign a name to the container which is &amp;ldquo;inclass&amp;rdquo; hello-world = the image to be used -p 9090:9090 = map local port 9090 to port 9090 inside the container -it = Container should have interactive terminal /bin/bash = run the bash command when the container is built   Explain what happens when a user types following into their browser:</description>
    </item>
    
    <item>
      <title>Blog2 - Docker Start</title>
      <link>https://liuwei0915.github.io/posts/blog2/</link>
      <pubDate>Mon, 27 Sep 2021 23:54:02 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog2/</guid>
      <description>Blog 2 Docker start What is Docker? Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. Because all of the containers share the services of a single operating system kernel, they use fewer resources than virtual machines.</description>
    </item>
    
    <item>
      <title>Blog1 - Markdown Syntax and Jump Proxy Note</title>
      <link>https://liuwei0915.github.io/posts/blog1/</link>
      <pubDate>Wed, 22 Sep 2021 15:30:49 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog1/</guid>
      <description>Bog 1 Markdown Syntax and Jump Proxy Note Markdown cheatsheet 1. Paragraphs  Each line end with two or more spaces will cause skip line.  2. Headers,   Uses 1-6 hash characters (#) at the start of the line, corresponding to - .
This is Header H2 with (##) This is Header H3 with (###) This is Header H5 with (#####)   User “Underlined” using equal signs (=) as and dashes (-) as in any number.</description>
    </item>
    
    <item>
      <title>Blog0 - Hugo starts</title>
      <link>https://liuwei0915.github.io/posts/blog0/</link>
      <pubDate>Sun, 05 Sep 2021 00:38:13 -0700</pubDate>
      
      <guid>https://liuwei0915.github.io/posts/blog0/</guid>
      <description>Blog 0 Hugo starts what is the Hugo? Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again. Hugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator. Unlike systems that dynamically build a page with each visitor request, Hugo builds pages when you create or update your content. Since websites are viewed far more often than they are edited, Hugo is designed to provide an optimal viewing experience for your websitebs end users and an ideal writing experience for website authors.</description>
    </item>
    
  </channel>
</rss>
